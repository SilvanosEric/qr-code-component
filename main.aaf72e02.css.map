{"version":3,"sources":["scss\\vendors\\_google-fonts.scss","scss\\base\\_reset.scss","scss\\base\\_typography.scss","scss\\base\\_helper.scss","scss\\layout\\_footer.scss","scss\\layout\\_grid.scss","scss\\pages\\_home.scss"],"names":[],"mappings":"AAGQ,wFAAA,CCMR,KACE,qBAAA,CACA,gBAGF,iBAGE,kBAAA,CACA,QAAA,CACA,UCbF,KACE,6BAAA,CACA,eAAA,CACA,iBCLF,KACE,WAGF,WACE,kBAAA,CACA,qBCVF,OACE,iBAAA,CACA,kBCDF,KACE,YAAA,CACA,YAAA,CACA,WAAA,CACA,oBAAA,CCFA,yBAGF,EACE,iBAKF,MACE,qBAAA,CAEA,qBAAA,CAEA,kBAGF,iBAJE,mBAIF,WAEE,oBAGF,YACE,oBAGF,aACE,cAAA,CACA,mBAGF,YACE","file":"main.aaf72e02.css","sourceRoot":"..\\src","sourcesContent":["// Add google fonts external stylesheet for the font family \"Outfit\"  (https://fonts.google.com/specimen/Outfit)\r\n// Usage: font-family: 'Outfit', sans-serif;\r\n\r\n@import url('https://fonts.googleapis.com/css2?family=Outfit:wght@400;700&display=swap');","// -----------------------------------------------------------------------------\r\n// This file contains very basic styles. Alternatively, called _base.scss\r\n// -----------------------------------------------------------------------------\r\n\r\n/**\r\n* Change the font size using a relative value, \r\n* this will still allow the user to change the default font size from the browser settings. \r\n* An absolute value would prevent changing the default font size from the browser thus affecting accessibility.\r\n*/\r\nhtml {\r\n  box-sizing: border-box;\r\n  font-size: 62.5%;\r\n}\r\n\r\n*,\r\n*::before,\r\n*::after {\r\n  box-sizing: inherit;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\n","/**\r\n * Basic typography style for copy text\r\n */\r\n\r\n@use \"../utils/\" as *; // files containing reusable pieces of code are imported using the @use directive\r\n\r\nbody {\r\n  font-family: $primary-font, sans-serif;\r\n  font-weight: weight(\"normal\");\r\n  font-size: 1.6rem;\r\n}\r\n","// -----------------------------------------------------------------------------\r\n// This file contains CSS helper classes.\r\n// -----------------------------------------------------------------------------\r\n\r\n.img {\r\n  width: 100%;\r\n}\r\n\r\n.container {\r\n  margin-inline: auto;\r\n  width: min(80%, 29rem);\r\n}\r\n","footer {\r\n  font-size: 1.18rem;\r\n  text-align: center;\r\n}","// Defines the grid layout for the page\r\nbody {\r\n  display: grid;\r\n  height: 100vh;\r\n  width: 100vw;\r\n  place-content: center;\r\n}","@use \"../utils/\" as *;\r\n\r\nbody {\r\n  background-color: color(body-bg);\r\n}\r\n\r\np {\r\n  font-size: $paragraph;\r\n}\r\n\r\n// After comparing the advantages and disadvantages of nesting elements in BEM,\r\n// my opinionated decision is only to nest pseudoclasses(::before and ::after) and states (:hover, :active, etc)\r\n.card {\r\n  background-color: color(card-bg);\r\n  padding: 1em;\r\n  padding-bottom: 2.5em;\r\n  border-radius: $border-radius;\r\n  text-align: center;\r\n}\r\n\r\n.card__img {\r\n  border-radius: $border-radius;\r\n  margin-bottom: 1.5em;\r\n}\r\n\r\n.card__text {\r\n  padding-inline: .5em;\r\n}\r\n\r\n.card__title {\r\n  font-size: 2rem;\r\n  margin-bottom: .8em;\r\n}\r\n\r\n.card__copy {\r\n  color: color(card-copy);\r\n}"]}